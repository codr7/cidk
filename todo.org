fun (fib (n Int) Int
  if n.< 2 n fib(n.- 1).+ fib(n.- 2)
)

fun (fib ((n a b) Int) Int
  if n.= 0 a if n.= 1 b fib(n.- 1 b a.+ b)
)

* calcl
** read id args as vals until ']'
*** add vector<Type *> Sym.args
**** compile/eval and use stack
**** generate final id using args
** call +[Int Int] etc.
*** pass env in add_fun and use to init f.env
*** extract opts.update_regs(cx, regs) from main.cpp/do_env/call
*** call update_regs from repl
** rename BinOp to CallBin
*** call-bin
*** generate id in eval
** change read to treat every second val as Op/Val regardless of type
*** use read_val
*** remove ReadCx
**** complete sequence in read_next
** add calc op
*** calc 35 + 7;
** add link op
*** dl
** add op precedence
* --
* mark regs/stack in cx.mark()
* add repl break loop
** add restarts
** gfu
* finish for op
** add ValType.iter(const Val &src, function<void (const Val &)>)
*** call with src in default imp
*** update for op to use iter
** bind var if not _
* add Quote type
** like ConstType
** add '-reader
* add Fun.rets (Rets)
** match against stack suffix if cx.debug
* add anon fun support
** push on stack from Defun if nil id
* add Fun arg type checking if cx.debug
** skip type A
* add Splice support
** splice list items automagically
* add return
** add eval state
** handle in Call.eval
* block setting of const vals
** check for const_type

