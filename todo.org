fun (fib (n Int) Int
  if n.< 2 n fib(n.- 1).+ fib(n.- 2)
)

fun (fib ((n a b) Int) Int
  if n.= 0 a if n.= 1 b fib(n.- 1 b a.+ b)
)

* add arg types to fun id automatically
** update math lib
** update bench/test/readme
* store list of Fun's in reverse weight order in root sym
*** add Cx.type_weight(1)
*** add Type/Fun.weight
* --
* rename call-bin to dispatch
** remove vararg
** add nargs
** lookup list on compile
** call first match
* --
* add read_parens
** copy cidk::read_list and emit expr
* add calc op
** calc 35 + 7;
* add link op
** dl
** add calc tests using link
* ---
* switch Env::Items to map
** bench
* add Fix type
** store value
** use number of decimals as scale
* mark regs/stack in cx.mark()
* add repl break loop
** add restarts
** gfu
* finish for op
** add ValType.iter(const Val &src, function<void (const Val &)>)
*** call with src in default imp
*** update for op to use iter
** bind var if not _
* add Quote type
** like ConstType
** add '-reader
* add Fun.rets (Rets)
** match against stack suffix if cx.debug
* add anon fun support
** push on stack from Defun if nil id
* add Fun arg type checking if cx.debug
** skip type A
* add Splice support
** splice list items automagically
* add return
** add eval state
** handle in Call.eval
