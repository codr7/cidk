fun (fib (n Int) Int
  if n.< 2 n fib(n.- 1).+ fib(n.- 2)
)

fun (fib ((n a b) Int) Int
  if n.= 0 a if n.= 1 b fib(n.- 1 b a.+ b)
)

* switch Env::Items to map
** remove Val.id
** bench
* mark regs/stack in cx.mark()
* add custom read_id to calcl
** break on isdigit, () and =
* add calcl assignment support
** check for '=' after read_id
** set to next value
*** use group for more
* add Fix type
** store value
** use number of decimals as scale
* add type unions
** parse Type? as Type|_
** remove any_type
** don't derive Nil from a_type
* finish for op
** add ValType.iter(const Val &src, function<void (const Val &)>)
*** call with src in default imp
*** update for op to use iter
** bind var if not _
* add recall op reuse arg
** default T
** call in new frame if F
* add repl break loop
** add restarts
** gfu
* add anon fun support
** push on stack from Defun if nil id
* add Fun.rets (Rets)
** match stack if cx.debug
