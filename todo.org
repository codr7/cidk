* add splat op
** copy push
** implement pair splat
** emit splat/let ops for pairs in let-compile
** replaces bind_id
* --
* add bin/hex support to read_num
** 0x03/0b11
* --
* add try op
** try (foo ()() {}) {...};
** take list of restarts
* add retry op
** retry ((e E) {push 'foo;}) {...};
* add repl break loop
* --
* add dump(ops, out) fn
** add Op.dump(depth, out)
** add ops::dump_arg(Val, out)
*** dump expressions at depth+1 with newlines
** add OpType.dump(out)
* add calcl :compile command
** dump generated ops
* --
* convert Cx.ops to array
** rename to evals/evalp
** add CIDK_EVAL_MAX
* grep mark() and rename to mark_refs()
** add default Ref.mark_refs()
*** set ref_marked
* --
* add deflib op
** pass lib.env down in compile/eval
* add support for recursive ids
** foo.bar.baz
** add sym.parts vector
*** default this
** add Val &ValType.resolve(Sym *id);
*** call for each part
* add use op
* --
* add default args
** x:Int:42
** add ArgList.min_nargs
*** calculate during parse
** clone on let
** add nargs to Call op like dispatch
*** update test/bench/readme
** use for a/b in fib_iter
*** bench
* --
* improve compile time detection of unknown args
** dispatch foo;
* finish for op
** add ValType.iter(const Val &src, function<void (const Val &)>)
*** call with src in default imp
*** update for op to use iter
** bind var if not _
** add to readme
* add list bench
** add list lib with push/pop/reserve funs
* add support for 0x/0b in read_num
* compile Dispatch to Call if list.size() == 1
* add sum types
** remove any_type
* add repl break loop
** add restarts
** gfu
* add anon fun support
** push on stack from Defun if nil id
* add Fun.rets (Rets)
** match stack if cx.debug
* add recall op type check/reuse args
** default F T
** call in new frame if reuse=F
