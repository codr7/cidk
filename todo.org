fun (fib (n Int) Int
  if n.< 2 n fib(n.- 1).+ fib(n.- 2)
)

fun (fib ((n a b) Int) Int
  if n.= 0 a if n.= 1 b fib(n.- 1 b a.+ b)
)

* throw error on missing id
** test.al
* rename dec op to step
** default +1
** update bench/test/readme
* add call op arg check
** extract Fun.match from dispatch op
** bench
* simplify ops
** drop varargs
* eval if != Fun in dispatch compile
* --
* add read_parens
** copy cidk::read_list and emit expr
* add calc op
** calc (35 + 7);
* add link op
** dl
** add calcl tests using link
* --
* switch Env::Items to map
** remove Val.id
** bench
* add Fix type
** store value
** use number of decimals as scale
* mark regs/stack in cx.mark()
* add repl break loop
** add restarts
** gfu
* finish for op
** add ValType.iter(const Val &src, function<void (const Val &)>)
*** call with src in default imp
*** update for op to use iter
** bind var if not _
* add anon fun support
** push on stack from Defun if nil id
* add Fun.rets (Rets)
** match stack if cx.debug
