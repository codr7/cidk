* move Ref.cx to Def
** add Cx &-arg to Ref.sweep()
* grep string &-args and replace with string + move
** compare benchmarks
* add OpType.mark_refs()
** implement for ops
** call from mark_refs(Ops)
* add mark/sweep ops
** mark call stack funs in cx.mark()
** call mark/sweep in benchmarks & compare
* rename Var to Env::Item
** move var_pool to EnvType::item_pool
* switch Env to use sorted Ls<Env::Item, EnvItems> for items
** keep track of max_key
** add Ls *find(, bool *found) that checks max_key & performs linear scan from end
*** return prev if not found
** bench
* add stack accessor like env
** op + macro
** push as list & move items
* add check op
** check (foo bar) {push foo bar 42; call + =;};
** first arg is optional context that's evaluated and printed on fail
* add repl
** launch if no args
** only eval if last char is ;
** clear stack on empty input
* add env.update(is, function<void>(Val &))
** use setter (set-X in current env) if available
* add 'include' op
** vararg like 'call'
** load ops on read and store in data
** eval on eval
* add Quote type
** struct with embedded Val
** add '-reader
** add Splice support
*** splice list items automagially
* add Splat op
* add lambda support
** &{...}
** anonymous Fun
* add Char type
** char32_t
* add Str type
** read as utf-8
*** https://stackoverflow.com/questions/16208079/how-to-work-with-utf-8-in-c-conversion-from-other-encodings-to-utf-8
** splat chars
* add >
** default using lt
* add optional dup op offs arg
* add optional swap op offs arg
* add drop op nvals arg
* add Fun.rets (Rets)
